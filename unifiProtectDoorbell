/*

Copyright 2020 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

1.4.4 - tomw - Added notificationText attribute for doorbells
1.4.3 - tomw - Added adjustChimeType command.  Can be used to disable and enable chimes in automations.
1.3.6 - tomw - Improved event handling
1.3.4 - tomw - Added light support and "isDark" attribute on cameras and lights
1.2.0 - tomw - Added doorbell LCD message support
1.0.0 - tomw - Initial release

*/

metadata
{
    definition(name: "UniFi Protect Doorbell", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "Notification"
        capability "PushableButton"
        
        command "push", ["number"]
        command "clearNotification"
        
        command "adjustChimeType", 
            [[name: "Chime type to set*", type:"ENUM", constraints: knownChimeTypes().keySet()], 
             [name: "Chime duration in msec (only applies to digital)", type:"NUMBER"]]
        
        attribute "chimeDuration", "number"
        attribute "notificationText", "string"
    }
}

def installed()
{
    sendEvent(name: "numberOfButtons", value: 1)
}

def processEvent(event)
{
    if(!event)
    {
        return
    }
    
    // if we have a button push event, register it
    if(event.type == "ring")
    {
        push(1)
    }
    
    def events = [[:]]
    
    if(null != event.chimeDuration)
    {
        events += [name: "chimeDuration", value: event.chimeDuration]
    }
    
    // if there's no value in lcdMessage.text, then assume it's the global default
    events += [name: "notificationText", value: event.lcdMessage?.text ?: "WELCOME"]
    
    events.each { sendEvent(it) }        
}

def push(number = 1)
{
    sendEvent(name: "pushed", value: number, isStateChange: true)
}

def deviceNotification(text)
{
    updateDoorbell([lcdMessage: [type: "CUSTOM_MESSAGE", text: text, resetAt: null]])
}

def clearNotification()
{
    updateDoorbell([lcdMessage: [resetAt: 0]])
}

def adjustChimeType(String type = "none", duration = 1000)
{
    try
    {
        if(!knownChimeTypes().keySet().contains(type))
        {
            throw new Exception("\"${type}\" chime type not supported")
        }
        
        def actualDuration = knownChimeTypes()?.getAt(type)
        
        if(type == "digital")
        {
            // use the command input, but bound it to the range of 1s to 10s
            actualDuration = ((duration < 1000) || (duration > 10000)) ? actualDuration : duration
        }
        
        updateDoorbell([chimeDuration: actualDuration])
        
        // request a refresh from the parent so our update is reflected
        parent?.refresh()
    }
    catch (Exception e)
    {
        log.warn e.message
    }
}

def knownChimeTypes()
{
    def chimes = 
        [
            "none": 0,
            "mechanical": 300,
            "digital": 1000
        ]
    
    return chimes
}

def updateDoorbell(dataMap)
{
    try
    {
        getParent()?.httpExecWithAuthCheck("PATCH", parent?.genParamsMain(getDoorbellUrlSuffix(), new groovy.json.JsonOutput().toJson(dataMap)), true)
    }
    catch (Exception e)
    {
        log.debug "updateDoorbell(${dataMap}) failed: ${e.message}"
    }
}

def getDoorbellUrlSuffix()
{
    def id = device.getDeviceNetworkId()?.split('-')?.getAt(0)
    def baseUrlSuffix = "/proxy/protect/api/cameras/" + id
    
    return baseUrlSuffix
}
