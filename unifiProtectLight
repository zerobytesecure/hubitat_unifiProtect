/*

Copyright 2022 - tomw

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------

Change history:

1.3.6 - tomw - Improved event handling
1.3.4 - tomw - Added light support and "isDark" attribute on cameras and lights

*/

metadata
{
    definition(name: "UniFi Protect Light", namespace: "tomw", author: "tomw", importUrl: "")
    {
        capability "MotionSensor"
        capability "Switch"
        capability "SwitchLevel"
        
        attribute "isDark", "enum", ["true", "false"]
    }
}

def processEvent(event)
{
    if(!event)
    {
        return
    }
    
    if(null != event.isLightOn)
    {
        sendEvent(name: "switch", value: event.isLightOn ? "on" : "off")
    }    
    
    if(null != event.lightDeviceSettings)
    {
        sendEvent(name: "level", value: brightToPercent(event.lightDeviceSettings.ledLevel))
    }
    
    if(null != event.isDark)
    {
        sendEvent(name: "isDark", value: event.isDark)        
    }
    
    if(null != event.isMotionDetected)
    {
        sendEvent(name: "motion", value: event.isMotionDetected ? "active" : "inactive")
    }
}

private brightToPercent(bright)
{
    def res = ((bright - 1) * 20).toInteger()
    return (res > 100) ? 100 : ((res < 0) ? 0 : res)
}

private percentToBright(percent)
{
    def res = Math.round((percent / 20) + 1)
    return (res > 6) ? 6 : ((res < 1) ? 1 : res)
}

def on()
{
    operateLight(true)
}

def off()
{
    operateLight(false)
}

def operateLight(state)
{
    updateLight([lightOnSettings: [isLedForceOn: state]])
}

def setLevel(level)
{
    updateLight([lightDeviceSettings: [ledLevel: percentToBright(level)]])
}

def updateLight(dataMap)
{
    try
    {
        getParent()?.httpExecWithAuthCheck("PATCH", parent?.genParamsMain(getLightUrlSuffix(), new groovy.json.JsonOutput().toJson(dataMap)), true)
    }
    catch (Exception e)
    {
        log.debug "updateLight(${dataMap}) failed: ${e.message}"
    }
}

def getLightUrlSuffix()
{
    def id = device.getDeviceNetworkId()?.split('-')?.getAt(0)
    def baseUrlSuffix = "/proxy/protect/api/lights/" + id
    
    return baseUrlSuffix
}
